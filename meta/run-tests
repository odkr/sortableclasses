#!/bin/bash
# run-tests - Runs various tests and linters.
# Copyright 2019 Odin Kroeger
#
# This is a bash script, because POSIX doesn't specify whether
# ``cmd1 | cmd2`` returns the exit status of cmd1 or cmd2.
#
# Assumes:
#   1. setup.py METADATA, packages 
#   2. cmd1 | cmd2 returns cmd2

set -Cefu


# Configuration
# =============

# Whether to run mypy. 0 means "don't", every other number means "do". 
RUN_MYPY=1

# The name of the Python interpreter to use.
PYTHON=python3

# The name of the pip utility to use.
PIP=pip3

# Python command to get all package names.
# This is piped to ``xargs -0``, 
# so use nullbytes to separate multiple paths.
PY_PKG_CMD="from setup import METADATA
if 'packages' in METADATA:
    print('\\0'.join(METADATA['packages']))
if 'scripts' in METADATA:
    print('\\0'.join(METADATA['scripts']))"


# Functions
# =========

# Takes a signal as argument, runs $EX, propagates the signal, and exits.
onexit() {
    __ONEXIT_STATUS=$?
    trap '' 0 "${1:?'missing SIGNAL.'}" || :
    set +e
    eval "${EX-}"
    EX=''
    kill "-$1" $$ 2>/dev/null
    exit "$__ONEXIT_STATUS"
}

# Registers onexit to catch signals 0, 1, 2, 3, 6, and 15.
# shellcheck disable=2064
register_onexit() {
    for __REGISTER_ONEXIT_SIGNO in 0 1 2 3 6 13 15; do
        trap "onexit $__REGISTER_ONEXIT_SIGNO" $__REGISTER_ONEXIT_SIGNO
    done
}

# Takes a format and arguments and prints it on STDERR.
warn() (
    format="${1:?'missing FORMAT'}"
    shift
    printf -- "run-tests: $format\\n" "$@" >&2
)


# Main
# ====

PACKAGES=$("$PYTHON" -c "$PY_PKG_CMD")
: "${PACKAGES:?'Could not determine package name(s).'}"

REPO=$(git worktree list | head -n1 | cut -f1 -d ' ')
: "${REPO:?'Could not determine repository path.'}"

cd -P "$REPO" || exit

[ "${RUN_MYPY-0}" -ne 0 ] && { mypy --help >/dev/null 2>&1 || ERRLVL=$?; }
if [ "${RUN_MYPY-0}" -ne 0 ] && [ ${ERRLVL-0} -ne 127 ]; then
        warn "running mypy."
        printf -- '%s' "$PACKAGES" | xargs -0 mypy
fi

bandit --help >/dev/null 2>&1 || ERRLVL=$?
if [ ${ERRLVL-0} -ne 127 ]; then
    warn "running bandit."
    printf -- '%s' "$PACKAGES" | xargs -0 bandit -r
fi

flake8 --help >/dev/null 2>&1 || ERRLVL=$?
if [ ${ERRLVL-0} -ne 127 ]; then
    warn "running flake8."
    printf -- '%s' "$PACKAGES" | xargs -0 flake8 --ignore=E252,E262
fi

pylint --help >/dev/null 2>&1 || ERRLVL=$?
if [ ${ERRLVL-0} -ne 127 ]; then
    warn "running pylint."
    printf -- '%s' "$PACKAGES" | xargs -0 pylint -s n
fi

pydocstyle --help >/dev/null 2>&1 || ERRLVL=$?
if [ ${ERRLVL-0} -ne 127 ]; then
    warn "running pydocstyle."
    printf -- '%s' "$PACKAGES" | xargs -0 pydocstyle --add-ignore=D104
fi

warn "running test suite."
"$PYTHON" setup.py --quiet test

"$PYTHON" -c 'import virtualenv' 2>/dev/null || ERRLVL=$?
if [ "${ERRLVL-0}" -eq 0 ]; then
    warn "testing installation."
    [ -d env ] || "$PYTHON" -m virtualenv env
    . env/bin/activate
    register_onexit
    export PACKAGES
    echo "$PACKAGES"
    NAME=$(printf -- '%s' "$PACKAGES" | xargs -0 sh -c 'echo "${1:?}"' --)
    : "${NAME:?'Could not determine package name.'}"
    EX="\"$PIP\" uninstall --quiet --yes \"$NAME\""
    "$PYTHON" setup.py --quiet install || return
    "$PYTHON" -c "import $NAME"
fi
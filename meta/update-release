#!/bin/sh

set -Cefu

CHANGE_FILES='setup.py README.rst'
REMOTE=origin


# Takes a signal as argument, runs $EX, propagates the signal, and exits.
onexit() {
    __ONEXIT_STATUS=$?
    trap '' 0 "${1:?'onexit: missing SIGNAL.'}" || :
    set +e
    eval "${EX-}"
    EX=''
    kill "-$1" $$ 2>/dev/null
    exit "$__ONEXIT_STATUS"
}

# Registers onexit to catch signals 0, 1, 2, 3, 6, and 15.
# shellcheck disable=2064
register_onexit() {
    for __REGISTER_ONEXIT_SIGNO in 0 1 2 3 6 13 15; do
        trap "onexit $__REGISTER_ONEXIT_SIGNO" $__REGISTER_ONEXIT_SIGNO
    done
}

# Takes an exit STATUS, a FORMAT, and arguments as arguments,
# prints the MESSAGE to STDERR and exits with STATUS.
# shellcheck disable=2059
panic() {
    set +eu
    __PANIC_STATUS="${1:?'panic: missing STATUS.'}"
    __PANIC_FORMAT="${2:?'panic: missing FORMAT.'}"
    shift 2
    printf "update-release: $__PANIC_FORMAT\\n" "$@" >&2
    exit "$__PANIC_STATUS"
}

# Takes a FILE, a STRING, and a SUBSTITUTE as arguments,
# and replaces all occurances of STRING in FILE with SUBSTITUTE.
# Makes a backup.
replace() (
    fname="${1:?'missing filename.'}"
    old="${2:?'missing old release name.'}"
    new="${3:?'missing new release name.'}"
    tmp=".$fname.tmp"
    readonly tmp
    [ -e "$tmp" ] && panic 69 '%s: file exists!' "$tmp"
    cp "$fname" "$fname.orig" || return
    register_onexit
    EX="[ -e \"$tmp\" ] && rm -f \"$tmp\";"
    sed "s/${old?}/${new?}/" "$fname" >"$tmp" || return
    [ -f "$tmp" ] && mv "$tmp" "$fname"
    unset EX
)


if ! [ "${1-}" ]; then
    echo "usage: ${0##*/} RELEASE" >&2
    exit 64
fi

NEW="${1:?'No release given.'}"

case $NEW in
    *[!0-9]*.*[!0-9]*.*[!0-9a-z-]*)
        panic 64 '%s: illegal version number!' "$NEW"
        ;;
    *.*.*)
        :
        ;;
    *)
        panic 64 '%s: illegal version number!' "$NEW"
esac

REPO=$(git worktree list | head -n1 | cut -f1 -d ' ')
TAG=$(git tag | grep -E '^v' | sort | tail -n1)
OLD="${TAG#v}"
unset TAG

[ "${OLD-}" ] || panic 78 'Could not determine latest release!'
#[ "$NEW" = "$OLD" ] && panic 64 "%s is the current release." "$NEW"

cd -P "${REPO:?'Could not determine repository name.'}" || exit

# meta/run-tests || exit

register_onexit
EX=:
# for FILE in $CHANGE_FILES; do
#     replace "$FILE" "$OLD" "$NEW"
#     EX="${EX?}; [ -e \"$FILE.orig\" ] && mv \"$FILE.orig\" \"$FILE\""
# done

# meta/run-tests || exit
unset EX

# cd -P docs || exit
# make clean html
# cd -P "${REPO?}" || exit

TAG="v$NEW"
# git add . 
# git commit -m 'Updated release.'
# git tag "$TAG"
# git push "$REMOTE" "$TAG"
# git push "$REMOTE"

[ -d env ] || python3 -m virtualenv env
. env/bin/activate

DOWNLOAD_DIR="$(pwd)/download"
readonly DOWNLOAD_DIR
# EX='[ "${DOWNLOAD_DIR-}" ] && [ -d "$DOWNLOAD_DIR" ] && rm -rf "$DOWNLOAD_DIR"'
# mkdir -m 0700 "${DOWNLOAD_DIR?}" || exit
cd -P "$DOWNLOAD_DIR" || exit

# These instructions mirror those in README.rst
# Download and unpack *sortableclasses* to the current directory.
curl "https://codeload.github.com/odkr/sortableclasses.py/tar.gz/$TAG" | 
    tar -xz
# The command below guesses a directory to install *sortableclasses* to.
PYTHON_SYSPATH=$(printf 'import sys; print("\\n".join(sorted(sys.path)))\n' | 
    python3 | grep -E "$(pwd)" | head -n1)
# If the command below errors, no suitable directory was found.
# Otherwise, it will show you where *sortableclasses* will be installed to.
echo "${PYTHON_SYSPATH:?'did not find suitable directory.'}" >&2
# Copy the directory "sortableclasses" into that directory.
[ -d "${PYTHON_SYSPATH:?}" ] && {
    PACKAGE="sortableclasses.py-$NEW/sortableclasses"
    cp -r "$PACKAGE" "$PYTHON_SYSPATH"
}
# Remove the downloaded files, if you want to.
rm -rf "sortableclasses.py-$NEW"
SOURCE="sortableclasses.py-$NEW"
[ -e "$SOURCE" ] && panic 69 '%s: not deleted!' "$SOURCE"

echo 'import sortableclasses' | python3

# upload on twine
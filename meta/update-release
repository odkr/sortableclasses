#!/bin/bash
# update-release - Updates releases on GitHub and PyPI.
# Copyright 2019 Odin Kroeger
#
# Performs various tests to make sure that releases work.
#
# This is a bash script, because POSIX doesn't specify whether
# `cmd1 | cmd2` returns the exit status of cmd1 or cmd2.
#
# Assumes:
#   1. There is a file `setup.py` at the root of the repository so that:
#      (a) `setup.py` has no side-effects upon import.
#      (b) `setup.py` front-ends Python's setuptools.
#      (c) `setup.py` stores all arguments to setuptools' `setup` function
#          in a global mapping called 'METADATA'. 
#      (d) METADATA has a member 'packages', which points to a sequence.
#      (e) the first item of METADATA['packages'] is the name of the package.
#   2. There is a git tag for every release, starting with "v".
#   3. GitHub is used.
#   4. `cmd1 | cmd2` returns the exit status of cmd2.

set -Cefu
set -x


# Configuration
# =============

# The files in which to replace the old release string with the new one.
# Takes a list of pathnames seperated by the input field seperator ($IFS).
UPDATE_FILES='setup.py README.rst'

# Whether to run tests again after updating the release name.
# You should do this if, and only if, some of the files listed in
# UPDATE_FILES contain project code. There is no need to do this
# if you only update setup.py and the README. 0 means "don't",
# every other number means "do".
TEST_TWICE=0

# The username to user to logon to PyPI.
TWINE_USERNAME=odkr

# The local name of the remote repository.
REMOTE_REPO=origin

# The name of the Python interpreter to use.
PYTHON=python3

# The name of the pip programme to use.
PIP=pip3


readonly UPDATE_FILES TWINE_USERNAME REMOTE_REPO PYTHON PIP
export TWINE_USERNAME


# Functions
# =========

# Takes a signal as argument, runs $EX, propagates the signal, and exits.
onexit() {
    __ONEXIT_STATUS=$?
    trap '' 0 "${1:?'onexit: missing SIGNAL.'}" || :
    set +e
    eval "${EX-}"
    EX=''
    kill "-$1" $$ 2>/dev/null
    exit "$__ONEXIT_STATUS"
}

# Registers onexit to catch signals 0, 1, 2, 3, 6, and 15.
# shellcheck disable=2064
register_onexit() {
    for __REGISTER_ONEXIT_SIGNO in 0 1 2 3 6 13 15; do
        trap "onexit $__REGISTER_ONEXIT_SIGNO" $__REGISTER_ONEXIT_SIGNO
    done
}

# Takes a FORMAT and arguments and prints it on STDERR.
warn() (
    format="${1:?'missing FORMAT.'}"
    shift
    printf -- "update-release: $format\\n" "$@" >&2
)

# Takes an exit STATUS, a FORMAT, and arguments as arguments,
# prints the MESSAGE to STDERR and exits with STATUS.
# shellcheck disable=2059
panic() {
    set +eu
    __PANIC_STATUS="${1:?'missing STATUS.'}"
    shift
    warn "$@"
    exit "$__PANIC_STATUS"
}

# Takes a FILE, a STRING, and a SUBSTITUTE as arguments,
# and replaces all occurances of STRING in FILE with SUBSTITUTE.
# Makes a backup. And uses a temporary file.
replace() (
    fname="${1:?'missing FILE.'}"
    old="${2:?'missing STRING.'}"
    new="${3:?'missing SUBSTITUTE.'}"
    tmp=".$fname.tmp"
    readonly tmp
    [ -e "$tmp" ] && panic 69 '%s: file exists!' "$tmp"
    cp "$fname" "$fname.orig" || return
    register_onexit
    EX="[ -e \"$tmp\" ] && rm -f \"$tmp\";"
    sed "s/${old?}/${new?}/" "$fname" >"$tmp" || return
    [ -f "$tmp" ] && mv "$tmp" "$fname"
    unset EX
)

# Takes a string and checks if it is a version number.
isversnum() (
    string="${1:?'missing string.'}"
    case $string in
        v*)
            :
            ;;
        *[!0-9]*.*[!0-9]*.*[!0-9a-z-]*)
            :
            ;;
        *.*.*)
            return 0
            ;;
        *)
            :
            ;;
    esac
    panic 64 '%s: illegal version number!' "$string"
)

# Takes a prompt as argument and asks for a password.
# shellcheck disable=2006
askpass() (
    register_onexit
    # shellcheck disable=2046
    cat <<EOF | tr -d '\n' >&2
$*
EOF
    # shellcheck disable=2016
    EX='stty echo 2>/dev/null; [ "$1" = 0 ] && echo >&2'
    stty -echo
    pass=''
    read -r pass
    cat <<EOF
$pass
EOF
)


# Argument processing
# ===================

if ! [ "${1-}" ]; then
    printf 'usage: %s RELEASE\n' "${0##*/}" >&2
    exit 64
fi

NEW_RELEASE="${1:?}"
isversnum "$NEW_RELEASE" || exit
#readonly NEW_RELEASE


# Determine other variables
# =========================

PREVIOUS_RELEASES=$(git tag --sort v:refname | sed -n 's/^v//p')
: "${PREVIOUS_RELEASES:?'Could not guess previous releases.'}"
readonly PREVIOUS_RELEASES

MOST_RECENT_RELEASE=$(printf -- '%s' "$PREVIOUS_RELEASES" | tail -n1)
: "${MOST_RECENT_RELEASE:?'Could not guess most recent release.'}"
readonly MOST_RECENT_RELEASE

[ "$MOST_RECENT_RELEASE" = "$NEW_RELEASE" ] && \
    panic 64 "%s: is the most recent release." "$NEW_RELEASE"

for RELEASE in $PREVIOUS_RELEASES; do
    [ "$RELEASE" = "$NEW_RELEASE" ] && \
        panic 64 "%s: is a previous release." "$NEW_RELEASE"
done

GITHUB_REPO=$(git remote show "$REMOTE_REPO" -n | 
    sed -n '/URL: / {s/.*\///; s/\.git//; p; q;}')
: "${GITHUB_REPO:?'Could not guess remote repository GitHub name.'}"
readonly GITHUB_REPO

GITHUB_USERNAME=$(git remote show "$REMOTE_REPO" -n | 
    sed -n '/URL:/ {s/.* git@github\.com://; s/\/.*//; p; q;}')
: "${GITHUB_USERNAME:?'Could not guess GitHub username.'}"

REPO=$(git worktree list | head -n1 | cut -f1 -d ' ')
cd -P "${REPO:?'Could not guess local repository path.'}" || exit
REPO=$(pwd)
: "${REPO:?'local repository disappeared.'}"
readonly REPO
export REPO

TMPDIR="$REPO/tmp"
readonly TMPDIR

NAME=$("$PYTHON" -c 'import sys, setup; print(setup.NAME)')
[ "${NAME-}" ] || panic 78 'Could not guess package name!'
readonly NAME

KEY=$(git config -l | sed -n '/^user.signingkey=/ {s/.*=//; p; q;}')
[ "${KEY-}" ] || panic 78 'Could not guess signing key!'
readonly KEY


# Main
# ====

#meta/run-tests || exit

register_onexit
EX=:
for FNAME in $UPDATE_FILES; do
    warn "updating %s." "$FNAME"
    #replace "$FILE" "$MOST_RECENT_RELEASE" "$NEW_RELEASE"
    EX="${EX?}; [ -e \"$FNAME.orig\" ] && mv \"$FNAME.orig\" \"$FNAME\""
done
unset FNAME

if [ "${TEST_TWICE-0}" -ne 0 ]; then
    meta/run-tests || exit
fi

unset EX

warn "updating documentation."

cd -P docs || exit
#make clean html >/dev/null
cd -P "$REPO" || exit

NEW_RELEASE="$MOST_RECENT_RELEASE"

warn 'releasing to GitHub'
TAG="v$NEW_RELEASE"
#git add setup.py README.rst docs
#git commit -m 'Updated release.'
#git tag "$TAG"
#git push --quiet "$REMOTE_REPO" "$TAG"
#git push --quiet "$REMOTE_REPO"

EX='[ "${TMPDIR-}" ] && [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"'
mkdir -m 0700 "$TMPDIR" || exit
cd -P "$TMPDIR" || exit

warn 'verifying GitHub releases'

DOWNLOAD_URL_TEMPLATE="https://codeload.github.com/%s/%s/%s/%s"
for FMT in tar.gz zip; do
    DOWNLOAD_URL=$(printf -- "$DOWNLOAD_URL_TEMPLATE" \
        "$GITHUB_USERNAME" "$GITHUB_REPO" "$FMT" "$TAG")
    FNAME="${DOWNLOAD_URL##*/}.$FMT"
    [ "$FNAME" = "$FMT" ] && panic 69 'Could not filename for verification.'
    curl --fail --silent --show-error "$DOWNLOAD_URL" >"$FNAME"
    case $FMT in
        tar) tar -xf "$FNAME" ;;
        tar.gz) tar -xzf "$FNAME" ;;
        zip) unzip "$FNAME" ;;
    esac
    RDIR="$GITHUB_REPO-$NEW_RELEASE"
    readonly RDIR
    export RDIR
    # find "$RDIR" -type f -print0 |
    # xargs -0 sh -c 'for F; do cmp "$F" "../${F#$RDIR/}" || exit; done' --
    [ $? -eq 0 ] || panic 'GitHub relase differs from local data'
    # If we reach this point in a shell that honours ``set -e`` and
    # in which ``cmd1 | cmd2`` returns the exit status of cmd2, then
    # the release on GitHub is identical to the local one.
    gpg -ba -u "$KEY" -o "../$FNAME.asc" "$FNAME"
    rm -rf "${RDIR:?}"
done

if "$PYTHON" -c 'import virtualenv'; then
    warn 'testing installation of GitHub release.'
    [ -d env ] || "$PYTHON" -m virtualenv env
    . env/bin/activate
    # These instructions mirror those in README.rst
    DOWNLOAD_URL=$(printf -- "$DOWNLOAD_URL_TEMPLATE" \
        "$GITHUB_USERNAME" "$GITHUB_REPO" tar.gz "$TAG")
    curl -fsS "$DOWNLOAD_URL" | tar -xz
    tar -xzf "$FNAME"
    PYPATH=$("$PYTHON" -c 'import sys; print("\n".join(sys.path))' | 
        grep -v '.zip' | grep -E "$REPO" | head -n1)
    [ -d "${PYPATH:?}" ] && {
        cp -r "$GITHUB_REPO-$NEW_RELEASE/$NAME" "$PYPATH"
    }
    "$PYTHON" -c "import $NAME"
    FROM="$GITHUB_REPO-$NEW_RELEASE"
    TO="${PYPATH:?}/${NAME:?}"
    for DIR in "$FROM" "$TO"; do
        rm -rf "$DIR"
        [ -e "$DIR" ] && panic 69 '%s: not deleted!' "$DIR"
    done
    cd -P "$REPO" || exit
    find env -name "$NAME-*" -delete
    
    exit
    
    warn 'testing with PyPI test instance'
    rm -rf build dist
    "$PYTHON" setup.py --quiet sdist bdist_wheel
    TWINE_PASSWORD=$(askpass "Password for PyPI login $TWINE_USERNAME: ")
    : "${TWINE_PASSWORD:?'No password given.'}"
    readonly TWINE_PASSWORD
    export TWINE_PASSWORD
    twine upload --repository-url https://test.pypi.org/legacy/ \
        --sign --identity "$KEY" dist/*
    cd / || exit
    "$PYTHON" -m pip install --quiet \
        --index-url https://test.pypi.org/simple/ "$NAME"
    "$PYTHON" -c "import $NAME"
    "$PIP" uninstall --quiet --yes "$NAME"
    cd -P "$REPO" || exit
    
    warn 'uploading to PyPI and testing installation'
    twine upload --sign --identity "$KEY" dist/*
    cd / || exit
    "$PYTHON" -m pip install --quiet "$NAME"
    "$PYTHON" -c "import $NAME"
    "$PIP" uninstall --quiet --yes "$NAME"
fi
